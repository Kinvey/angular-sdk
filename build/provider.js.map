{"version":3,"sources":["provider.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;IAEa;AACX,WADW,cACX,GAAc;0BADH,gBACG;;;AAEZ,QAAM,cAAc,kBAAY,cAAZ,EAAd,CAFM;AAGZ,gBAAY,QAAZ,iCAA0C,0BAA1C;;;AAHY,kBAMZ,CAAO,GAAP,CAAW,4BAAX;;;AANY,gBASZ,CAAM,GAAN,CAAU,0BAAV,EATY;GAAd;;eADW;;2BAaQ;UAAd,gEAAU,kBAAI;;AACjB,aAAO,gCAAO,IAAP,CAAY,OAAZ,CAAP,CADiB;;;;2BAIZ;AACL,6CADK;;;;SAjBI","file":"provider.js","sourcesContent":["import { Kinvey } from 'kinvey-javascript-sdk-core';\nimport { NetworkRack } from 'kinvey-javascript-sdk-core/build/rack/rack';\nimport { SerializeMiddleware } from 'kinvey-javascript-sdk-core/build/rack/middleware/serialize';\nimport { HttpMiddleware } from './http';\nimport { Popup } from 'kinvey-javascript-sdk-core/build/utils/popup';\nimport { PopupAdapter } from './popup';\nimport { Device } from 'kinvey-javascript-sdk-core/build/utils/device';\nimport { DeviceAdapter } from './device';\n\nexport class KinveyProvider {\n  constructor() {\n    // Use Http middleware after the Serialize middleware\n    const networkRack = NetworkRack.sharedInstance();\n    networkRack.useAfter(SerializeMiddleware, new HttpMiddleware());\n\n    // Use Device Adapter\n    Device.use(new DeviceAdapter());\n\n    // Use Popup Adapter\n    Popup.use(new PopupAdapter());\n  }\n\n  init(options = {}) {\n    return Kinvey.init(options);\n  }\n\n  $get() {\n    return Kinvey;\n  }\n}\n"],"sourceRoot":"/source/"}